class User < ApplicationRecord
  has_many :comments
  has_many :posts
  has_many :locations, through: :posts

  has_secure_password

  #many to many user relationships through follower_id and followed_id
  has_many :active_relationships, class_name: "UserRelationship", foreign_key: "follower_id", dependent: :destroy
  has_many :passive_relationships, class_name: "UserRelationship", foreign_key: "followed_id", dependent: :destroy

  has_many :followed_users, through: :active_relationships, source: :followed_user
  has_many :follower_users, through: :passive_relationships, source: :follower_user

  #validations
  validates :username, uniqueness: true

  # def password=(new_password)
  #   salt = BCrypt::Engine::generate_salt
  #   hashed = BCrypt::Engine::hash_secret(new_password, salt)
  #   self.password_digest = salt + hashed
  # end
  #
  # # authenticate(password: string) -> User?
  # def authenticate(password)
  #   # Salts generated by generate_salt are always 29 chars long.
  #   salt = password_digest[0..28]
  #   hashed = BCrypt::Engine::hash_secret(password, salt)
  #     return nil unless (salt + hashed) == self.password_digest
  # end
end
